// Generated by CoffeeScript 1.3.3
(function() {
  var RCatView, RLink, RLinkList, RedditEngine, reng, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = window;

  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
  };

  RLink = (function(_super) {

    __extends(RLink, _super);

    function RLink() {
      return RLink.__super__.constructor.apply(this, arguments);
    }

    RLink.prototype.defaults = {
      linkdesc: "no description"
    };

    return RLink;

  })(Backbone.Model);

  RLinkList = (function(_super) {

    __extends(RLinkList, _super);

    function RLinkList() {
      return RLinkList.__super__.constructor.apply(this, arguments);
    }

    RLinkList.prototype.model = RLink;

    return RLinkList;

  })(Backbone.Collection);

  RCatView = (function(_super) {

    __extends(RCatView, _super);

    function RCatView(el) {
      var pat;
      this.el = el;
      this.coll = new RLinkList;
      _.bindAll(this);
      pat = $("#linktemplate").html();
      this.linktmpl = _.template(pat);
    }

    RCatView.prototype.renderOne = function(m) {
      var expanded;
      expanded = this.linktmpl({
        linkdesc: m.get("title"),
        linkscore: m.get("score"),
        linkimg: m.get("thumbnail")
      });
      return expanded;
    };

    RCatView.prototype.render = function() {
      var all,
        _this = this;
      all = $("<div>");
      this.coll.each(function(m) {
        return all.append($(_this.renderOne(m)));
      });
      console.log(all);
      this.el.empty();
      return this.el.append(all);
    };

    RCatView.prototype.mkModel = function(d) {
      var m;
      m = new RLink;
      m.set(d);
      return m;
    };

    RCatView.prototype.addLink = function(d) {
      var m;
      m = this.mkModel(d);
      return this.coll.add(m);
    };

    return RCatView;

  })(Backbone.View);

  RedditEngine = (function() {

    function RedditEngine() {}

    RedditEngine.prototype.initialize = function() {
      var pat;
      pat = $("#linktemplate").html();
      console.log(pat);
      this.linktmpl = _.template(pat);
      console.log("template", this.linktmpl);
      this.cats = [];
      this.linkviews = {};
      this.mkView("pics");
      return this.mkView("funny");
    };

    RedditEngine.prototype.mkView = function(name) {
      var lv, sel;
      sel = "div[data-catname='" + name + "']";
      root = $(sel);
      lv = new RCatView(root);
      this.cats.push(name);
      return this.linkviews[name] = lv;
    };

    RedditEngine.prototype.fetchAll = function() {
      var cat, _i, _len, _ref, _results;
      _ref = this.cats;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cat = _ref[_i];
        _results.push(this.fetchLinks(cat, ""));
      }
      return _results;
    };

    RedditEngine.prototype.fetchLinks = function(cat, qargs) {
      var lv, selector, url,
        _this = this;
      cat = "pics";
      selector = "";
      qargs = qargs = "jsonp=?&";
      url = "http://www.reddit.com/r/" + cat + "/" + selector + ".json?" + qargs + " ";
      console.log("going ajax");
      lv = this.linkviews[cat];
      $.ajax({
        url: url,
        jsonp: "jsonp",
        dataType: "jsonp",
        success: function(resp) {
          var d, it, items, _i, _len;
          items = resp.data.children;
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            it = items[_i];
            d = it.data;
            lv.addLink(d);
          }
          return lv.render();
        }
      });
      return "        \n$.getJSON url, (resp) =>\n    items = resp.data.children\n    for it in items\n        console.log it";
    };

    return RedditEngine;

  })();

  root.RedditEngine = RedditEngine;

  reng = null;

  $(function() {
    console.log("starting up");
    root.redditengine = reng = new RedditEngine();
    reng.initialize();
    return reng.fetchAll();
  });

}).call(this);
